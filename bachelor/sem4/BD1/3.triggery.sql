set serveroutput on;


--inserts or deletes income according to project's state( finished or not)
CREATE OR REPLACE TRIGGER update_incomes
AFTER INSERT OR DELETE OR UPDATE ON projects
FOR EACH ROW
BEGIN  
    IF INSERTING THEN
        IF :NEW.is_finished = 1 THEN
            INSERT INTO incomes(income, project_id) VALUES(:NEW.remuneration, :NEW.project_id);
        END IF;
    ELSIF DELETING THEN
        IF :OLD.is_finished = 1 THEN
            DELETE FROM incomes WHERE project_id = :OLD.project_id;
        END IF;
    ELSIF UPDATING THEN
        IF :NEW.is_finished = 1 AND :OLD.is_finished = 0 THEN
            INSERT INTO incomes(income, project_id) VALUES(:NEW.remuneration, :NEW.project_id);
        ELSIF :OLD.is_finished = 1 AND :NEW.is_finished = 0 THEN
            DELETE FROM incomes WHERE project_id = :OLD.project_id;
        END IF;
    END IF;
END;
/

-- remuneration of the project cannot be negative
CREATE OR REPLACE TRIGGER remuneration_not_negative
BEFORE INSERT ON projects
FOR EACH ROW
BEGIN
    IF :NEW.remuneration < 0 THEN
        RAISE_APPLICATION_ERROR( -20001, 'Remuneration cannot be negative' );
    END IF;
        DBMS_OUTPUT.PUT_LINE('New project booked: ' || :NEW.project_name);
END;
/

-- expenses of the project cannot be higher than income generated by it
CREATE OR REPLACE TRIGGER project_must_be_worthy
BEFORE INSERT ON expenses
FOR EACH ROW
DECLARE
    expenses_sum NUMBER(10);
    incomes_sum NUMBER(10);
BEGIN
    SELECT SUM(expense) INTO expenses_sum FROM expenses WHERE project_id = :NEW.project_id;
    SELECT SUM(income) INTO incomes_sum FROM incomes WHERE project_id = :NEW.project_id;
    --DBMS_OUTPUT.PUT_LINE(TO_CHAR(expenses_sum) ||'   ' || TO_CHAR(incomes_sum));
    IF (:NEW.expense + expenses_sum) >= incomes_sum THEN
        RAISE_APPLICATION_ERROR( -20002, 'Sum of expenses cannot be higher than sum of remuneration for a single project' );
    END IF;
END;
/


/*
CREATE OR REPLACE TRIGGER insert_country_before_city
BEFORE INSERT ON cities
FOR EACH ROW
DECLARE
    country_count NUMBER(10);
BEGIN
    SELECT COUNT(*) INTO country_count FROM countries WHERE country = :NEW.country;
    IF country_count = 0 THEN
        INSERT INTO countries VALUES(:NEW.country);
    END IF;
END;
/
*/

